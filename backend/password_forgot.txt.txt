Forgot component 


// ForgotPassword.js
import React, { useState } from "react";
import axios from "axios";

const ForgotPassword = () => {
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post("/forgotPassword", { email });
      setMessage(response.data.message);
    } catch (error) {
      setMessage("Error sending reset link. Please try again.");
    }
  };

  return (
    <div>
      <h2>Forgot Password</h2>
      <form onSubmit={handleSubmit}>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <button type="submit">Send Reset Link</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default ForgotPassword;

_____________________________________________________________________________

Reset Component 

// ResetPassword.js
import React, { useState } from "react";
import { useParams, useHistory } from "react-router-dom";
import axios from "axios";

const ResetPassword = () => {
  const { token } = useParams(); // Token from URL
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState("");
  const history = useHistory();

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (password !== confirmPassword) {
      setMessage("Passwords do not match");
      return;
    }

    try {
      const response = await axios.post(`/resetPassword/${token}`, { password });
      setMessage(response.data.message);

      // Redirect to login page after successful reset
      if (response.data.message === "Password has been reset successfully") {
        history.push("/login");
      }
    } catch (error) {
      setMessage("Error resetting password. The token might have expired.");
    }
  };

  return (
    <div>
      <h2>Reset Password</h2>
      <form onSubmit={handleSubmit}>
        <label>New Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <label>Confirm Password:</label>
        <input
          type="password"
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          required
        />
        <button type="submit">Reset Password</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default ResetPassword;

_________________________________________________________________

Routes :

// App.js
import React from "react";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom";
import ForgotPassword from "./ForgotPassword";
import ResetPassword from "./ResetPassword";

const App = () => {
  return (
    <Router>
      <Switch>
        <Route path="/forgot-password" component={ForgotPassword} />
        <Route path="/reset-password/:token" component={ResetPassword} />
      </Switch>
    </Router>
  );
};

export default App;



Reset password 2nd method 


import React, { useState } from "react";
import axios from "axios";
import { useParams, useNavigate } from "react-router-dom";

const ResetPassword = () => {
  const { token } = useParams(); // Get the token from the URL
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [message, setMessage] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (password !== confirmPassword) {
      setMessage("Passwords do not match");
      return;
    }

    try {
      const response = await axios.post(
        `http://localhost:3003/reset-password/${token}`, // Send the token along with the password
        { password }
      );
      setMessage(response.data.message);
      // Redirect to login after successful reset
      navigate("/login");
    } catch (error) {
      setMessage("Error resetting password. Please try again.");
    }
  };

  return (
    <div>
      <h2>Reset Password</h2>
      <form onSubmit={handleSubmit}>
        <label>New Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        <label>Confirm New Password:</label>
        <input
          type="password"
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          required
        />
        <button type="submit">Reset Password</button>
      </form>
      {message && <p>{message}</p>}
    </div>
  );
};

export default ResetPassword;



_____________________________________________________________


main method Route

    <BrowserRouter>
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route element={<Product_routes />}>
          {/* ___________Student Details  */}
          <Route path="/" element={<Addstudent />} />
          <Route path="/ViewStatus" element={<ViewStatus />} />
          <Route path="/Status/:id" element={<Status />} />

          {/* ______________end student details  */}

          <Route path="/DashBoard" element={<DashBoard />} />
          <Route path="/masterPage" element={<Master />} />

          {/* Forgot password  */}
          <Route path="/forgot-password" element={<ForgotPassword />} />
          <Route path="/reset-password/:token" element={<ResetPassword />} />
        </Route>
      </Routes>
      <ToastContainer />
    </BrowserRouter>
