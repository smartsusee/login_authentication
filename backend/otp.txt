otp getnarate 

const crypto = require('crypto');
const nodemailer = require('nodemailer');
const otpGenerator = require('otp-generator');

// Forgot password - OTP generation
app.post("/forgotPassword", async (req, res) => {
  try {
    const user = await loginAuth.findOne({ email: req.body.email });
    if (!user) return res.status(400).json("Email not found!");

    // Generate a random 6-digit OTP
    const otp = otpGenerator.generate(6, { upperCase: false, specialChars: false });

    // Store the OTP and set expiry time (10 minutes)
    user.resetPasswordToken = otp;
    user.resetPasswordExpires = Date.now() + 10 * 60 * 1000; // 10 minutes from now
    await user.save();

    // Send the OTP via email
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: "your-email@gmail.com",
        pass: "your-email-password",
      },
    });

    const mailOptions = {
      from: "your-email@gmail.com",
      to: user.email,
      subject: "Password Reset OTP",
      html: `<p>Hello, ${user.name}</p>
             <p>Your OTP for password reset is: <strong>${otp}</strong></p>
             <p>If you did not request this, please ignore this email.</p>`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        return res.status(500).json({ message: "Error sending OTP email", error });
      }
      res.status(200).json({ message: "OTP sent to your email" });
    });
  } catch (error) {
    res.status(500).json({ message: "An error occurred", error });
  }
});


otp verify 
const bcrypt = require('bcrypt');

// Verify OTP and reset password
app.post("/verifyOtp", async (req, res) => {
  try {
    const { email, otp, newPassword } = req.body;

    // Find the user by email and OTP, also check if the OTP has not expired
    const user = await loginAuth.findOne({
      email: email,
      resetPasswordToken: otp,
      resetPasswordExpires: { $gt: Date.now() }, // Check if OTP is still valid
    });

    if (!user) {
      return res.status(400).json({
        message: "Invalid or expired OTP"
      });
    }

    // If valid, reset the password
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetPasswordToken = null; // Clear the OTP
    user.resetPasswordExpires = null; // Clear the expiration
    await user.save();

    res.status(200).json({ message: "Password reset successfully" });
  } catch (error) {
    res.status(500).json({ message: "An error occurred", error });
  }
});
